
// =================================================================
// KONFIGURASI APLIKASI
// =================================================================
const SPREADSHEET_ID = '11Wkh9gRrmmsAYQvKdaHyebYveuEp5cdcEx6Wy_w7T5Y';
const DRIVE_FOLDER_ID = '1bGAnU5PRCPei9sjAnJIyBeLoRjv2nOVd';
const FRONTEND_URL = 'https://masfy.github.io'; // URL frontend Anda

// Nama-nama sheet di dalam Spreadsheet Anda.
const SHEET_PENGGUNA = 'Pengguna';
const SHEET_SURAT_MASUK = 'SuratMasuk';
const SHEET_SURAT_KELUAR = 'SuratKeluar';

// =================================================================
// ENTRY POINT UNTUK API (MENANGANI PERMINTAAN POST)
// =================================================================

function doPost(e) {
  // Menangani Preflight Request untuk CORS
  if (e.postData.type === 'application/json' && e.postData.contents === 'OPTIONS') {
    const response = ContentService.createTextOutput();
    response.addHeader('Access-Control-Allow-Origin', FRONTEND_URL);
    response.addHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    response.addHeader('Access-Control-Allow-Headers', 'Content-Type');
    return response;
  }
  
  try {
    const body = JSON.parse(e.postData.contents);
    const { functionName, args } = body;

    if (!functionName) {
      throw new Error("functionName tidak ditemukan di body permintaan.");
    }
    
    // Daftar fungsi yang diizinkan untuk dipanggil
    const allowedFunctions = {
      login: login_,
      logout: logout_,
      checkAuth: checkAuth_,
      getDashboardStats: getDashboardStats_,
      listSurat: listSurat_,
      getNewNomorSurat: getNewNomorSurat_,
      createSurat: createSurat_,
      updateSurat: updateSurat_,
      deleteSurat: deleteSurat_,
      updateUserProfile: updateUserProfile_,
      ping: ping_
    };
    
    if (typeof allowedFunctions[functionName] !== 'function') {
      throw new Error(`Fungsi "${functionName}" tidak diizinkan atau tidak ada.`);
    }

    const result = Array.isArray(args) 
      ? allowedFunctions[functionName](...args) 
      : allowedFunctions[functionName]();

    const jsonResponse = ContentService.createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
      
    // Menambahkan header CORS ke response
    jsonResponse.addHeader('Access-Control-Allow-Origin', FRONTEND_URL);
    
    return jsonResponse;

  } catch (error) {
    Logger.log(`API Error: ${error.toString()}\nStack: ${error.stack}`);
    const errorResponse = ContentService.createTextOutput(JSON.stringify({ success: false, error: error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
    errorResponse.addHeader('Access-Control-Allow-Origin', FRONTEND_URL);
    return errorResponse;
  }
}

// =================================================================
// HELPER FUNCTIONS (Sama seperti sebelumnya)
// =================================================================

function getSheetData(sheetName) {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(sheetName);
    if (!sheet) return [];
    const dataRange = sheet.getDataRange();
    if (dataRange.getNumRows() < 2) return [];
    const values = dataRange.getValues();
    const headers = values.shift();
    return values.map(row => {
        const obj = {};
        headers.forEach((header, i) => {
            obj[header] = row[i] instanceof Date ? Utilities.formatDate(row[i], Session.getScriptTimeZone(), "yyyy-MM-dd") : row[i];
        });
        return obj;
    });
}

function findRowIndexById(sheet, id) {
    const idColumn = sheet.getRange("A:A").getValues();
    for (let i = 0; i < idColumn.length; i++) {
        if (idColumn[i][0] == id) {
            return i + 1;
        }
    }
    return -1;
}

function saveFileToDrive(fileData) {
  if (!fileData || !fileData.base64Data) return null;
  const decoded = Utilities.base64Decode(fileData.base64Data);
  const blob = Utilities.newBlob(decoded, fileData.mimeType, fileData.fileName);
  const folder = DriveApp.getFolderById(DRIVE_FOLDER_ID);
  const file = folder.createFile(blob);
  file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  return file.getUrl();
}


// =================================================================
// SEMUA FUNGSI LOGIKA BISNIS (login_, dsb.) TETAP SAMA
// =================================================================

const login_ = (email, password) => {
  if (!email || !password) {
    return { success: false, message: 'Email dan password harus diisi.' };
  }
  const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_PENGGUNA);
  const data = sheet.getDataRange().getValues();
  const headers = data.shift();
  const emailIndex = headers.indexOf('Email');
  const passwordIndex = headers.indexOf('Password');
  
  const userRow = data.find(row => row[emailIndex] === email && row[passwordIndex] == password);

  if (userRow) {
    const user = {};
    headers.forEach((header, i) => {
      user[header] = userRow[i];
    });
    delete user['Password'];
    
    const userProperties = PropertiesService.getUserProperties();
    userProperties.setProperty('user', JSON.stringify(user));

    return { success: true, user: user };
  }
  
  return { success: false, message: 'Email atau password salah.' };
};

const logout_ = () => {
    PropertiesService.getUserProperties().deleteProperty('user');
    return { success: true };
};

const checkAuth_ = () => {
    const userJson = PropertiesService.getUserProperties().getProperty('user');
    if (userJson) {
        return { success: true, user: JSON.parse(userJson) };
    }
    return { success: false };
};

const getDashboardStats_ = () => {
    const suratMasuk = getSheetData(SHEET_SURAT_MASUK);
    const suratKeluar = getSheetData(SHEET_SURAT_KELUAR);

    const today = new Date();
    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);

    const masukBulanIni = suratMasuk.filter(s => new Date(s['Tanggal Diterima']) >= firstDayOfMonth).length;
    const keluarBulanIni = suratKeluar.filter(s => new Date(s['Tanggal Surat']) >= firstDayOfMonth).length;
    const belumDisposisi = suratMasuk.filter(s => s.Status === 'Belum Disposisi').length;

    return {
        totalMasuk: suratMasuk.length,
        totalKeluar: suratKeluar.length,
        masukBulanIni,
        keluarBulanIni,
        belumDisposisi
    };
};

const listSurat_ = (type, filters) => {
    const sheetName = type === 'masuk' ? SHEET_SURAT_MASUK : SHEET_SURAT_KELUAR;
    let data = getSheetData(sheetName);

    if (filters) {
        if (filters.searchTerm) {
            const searchTerm = filters.searchTerm.toLowerCase();
            data = data.filter(s => 
                (s['Perihal'] && s['Perihal'].toLowerCase().includes(searchTerm)) ||
                (s['Nomor Surat'] && s['Nomor Surat'].toLowerCase().includes(searchTerm)) ||
                (s['Asal Surat'] && s['Asal Surat'].toLowerCase().includes(searchTerm)) ||
                (s['Tujuan Surat'] && s['Tujuan Surat'].toLowerCase().includes(searchTerm))
            );
        }
        if (filters.startDate) {
            const dateField = type === 'masuk' ? 'Tanggal Diterima' : 'Tanggal Surat';
            data = data.filter(s => new Date(s[dateField]) >= new Date(filters.startDate));
        }
        if (filters.endDate) {
            const dateField = type === 'masuk' ? 'Tanggal Diterima' : 'Tanggal Surat';
            data = data.filter(s => new Date(s[dateField]) <= new Date(filters.endDate));
        }
        if (filters.status) {
            data = data.filter(s => s.Status === filters.status);
        }
    }
    const dateField = type === 'masuk' ? 'Tanggal Diterima' : 'Tanggal Surat';
    return data.sort((a, b) => new Date(b[dateField]) - new Date(a[dateField]));
};

const getNewNomorSurat_ = () => {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_SURAT_KELUAR);
    const lastRow = sheet.getLastRow();
    if (lastRow < 2) return "001";
    
    const lastNomor = sheet.getRange(lastRow, 2).getValue();
    const parts = lastNomor.split('/');
    if (parts.length > 0) {
      let lastNumber = parseInt(parts[0], 10);
      if (!isNaN(lastNumber)) {
        let newNumber = (lastNumber + 1).toString().padStart(3, '0');
        parts[0] = newNumber;
        return parts.join('/');
      }
    }
    return (lastRow).toString().padStart(3, '0');
}

const createSurat_ = (type, data) => {
    const sheetName = type === 'masuk' ? SHEET_SURAT_MASUK : SHEET_SURAT_KELUAR;
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(sheetName);
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    const newRow = new Array(headers.length).fill('');
    const id = Utilities.getUuid();
    
    headers.forEach((header, i) => {
        if (header === 'ID') newRow[i] = id;
        else if (header === 'Dibuat Pada' || header === 'Diperbarui Pada') newRow[i] = new Date();
        else if (data[header] !== undefined) newRow[i] = data[header];
    });

    if (data.file) {
        const fileUrl = saveFileToDrive(data.file);
        const fileUrlIndex = headers.indexOf('File URL');
        if (fileUrlIndex !== -1) newRow[fileUrlIndex] = fileUrl;
    }
    
    sheet.appendRow(newRow);
    return { success: true, message: 'Data berhasil ditambahkan.' };
};

const updateSurat_ = (type, id, data) => {
    const sheetName = type === 'masuk' ? SHEET_SURAT_MASUK : SHEET_SURAT_KELUAR;
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(sheetName);
    const rowIndex = findRowIndexById(sheet, id);
    if (rowIndex === -1) return { success: false, message: 'Data tidak ditemukan.' };

    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const rowValues = sheet.getRange(rowIndex, 1, 1, sheet.getLastColumn()).getValues()[0];

    headers.forEach((header, i) => {
        if (data[header] !== undefined) rowValues[i] = data[header];
        if (header === 'Diperbarui Pada') rowValues[i] = new Date();
    });

    if (data.file) {
        const fileUrl = saveFileToDrive(data.file);
        const fileUrlIndex = headers.indexOf('File URL');
        if (fileUrlIndex !== -1) rowValues[fileUrlIndex] = fileUrl;
    }

    sheet.getRange(rowIndex, 1, 1, headers.length).setValues([rowValues]);
    return { success: true, message: 'Data berhasil diperbarui.' };
};

const deleteSurat_ = (type, id) => {
    const sheetName = type === 'masuk' ? SHEET_SURAT_MASUK : SHEET_SURAT_KELUAR;
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(sheetName);
    const rowIndex = findRowIndexById(sheet, id);
    if (rowIndex === -1) return { success: false, message: 'Data tidak ditemukan.' };
    sheet.deleteRow(rowIndex);
    return { success: true, message: 'Data berhasil dihapus.' };
};


const updateUserProfile_ = (profileData) => {
    const userJson = PropertiesService.getUserProperties().getProperty('user');
    if (!userJson) return { success: false, message: 'Sesi tidak valid.' };
    const currentUser = JSON.parse(userJson);

    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_PENGGUNA);
    const rowIndex = findRowIndexById(sheet, currentUser.ID);
    if (rowIndex === -1) return { success: false, message: 'Pengguna tidak ditemukan.' };

    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const values = sheet.getRange(rowIndex, 1, 1, headers.length).getValues()[0];
    
    let newPhotoUrl = values[headers.indexOf('Foto URL')];
    if (profileData.photoFile) {
        newPhotoUrl = saveFileToDrive(profileData.photoFile);
    }
    
    const updatedUser = { ...currentUser };

    headers.forEach((header, i) => {
        if (profileData[header] !== undefined) {
            values[i] = profileData[header];
            updatedUser[header] = profileData[header];
        }
        if (header === 'Foto URL') {
            values[i] = newPhotoUrl;
            updatedUser[header] = newPhotoUrl;
        }
    });

    sheet.getRange(rowIndex, 1, 1, headers.length).setValues([values]);
    
    delete updatedUser.Password;
    PropertiesService.getUserProperties().setProperty('user', JSON.stringify(updatedUser));

    return { success: true, message: 'Profil berhasil diperbarui.', user: updatedUser };
}


const ping_ = () => {
    return { success: true, source: 'Berhasil dari Google Apps Script' };
}
